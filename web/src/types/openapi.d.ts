/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/system/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Liveness/health probe */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            ok?: boolean;
                            service?: string;
                            time?: string;
                            uptimeSeconds?: number;
                            pid?: number;
                            memoryMB?: {
                                [key: string]: number;
                            };
                            version?: string;
                            env?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/system/xrpl-status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** XRPL connectivity and node telemetry */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            ok?: boolean;
                            endpoint?: string;
                            connected?: boolean;
                            info?: {
                                [key: string]: unknown;
                            };
                            fees?: {
                                [key: string]: unknown;
                            };
                            validatedLedger?: {
                                [key: string]: unknown;
                            };
                            error?: string;
                            time?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tokens/issue": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Issue a token from issuer to holder
         * @description Issues an IOU payment from the issuer account to the holder. Accepts 3-char codes (USD/EUR) or longer ASCII codes which are normalized (by the adapter) to 160-bit hex for XRPL. Holder must have a TrustSet with sufficient limit.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    /** @example {
                     *       "currencyCode": "MARKS",
                     *       "amount": "100",
                     *       "destination": "rE5MDtonMcosLV6fpRJjib3MQiBZ8HGapw",
                     *       "metadata": {
                     *         "jurisdiction": "DE"
                     *       }
                     *     } */
                    "application/json": {
                        /** @description 3-char code (e.g., USD) or longer ASCII; long codes auto-convert to hex-160 by the adapter. */
                        currencyCode: string;
                        /** @description Token amount as a string to preserve precision. */
                        amount: string;
                        /** @description Holder address (r-addr on XRPL). */
                        destination: string;
                        /**
                         * @description Optional arbitrary metadata encoded in a transaction Memo.
                         * @default {}
                         */
                        metadata?: {
                            [key: string]: unknown;
                        };
                    };
                };
            };
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            ok?: boolean;
                            txHash?: string;
                            explorer?: string;
                        };
                    };
                };
                /** @description Default Response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            ok?: boolean;
                            error?: string;
                            hint?: string;
                        };
                    };
                };
                /** @description Default Response */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            ok?: boolean;
                            error?: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/trustlines/create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create/Set a trust line (Holder â†’ Issuer)
         * @description Holder establishes a trust line to the issuer for a given currency and limit. 3-char codes or longer ASCII are normalized by the adapter.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    /** @example {
                     *       "currencyCode": "EURF",
                     *       "limit": "1000000",
                     *       "holderSecret": "sEd7...DEV_ONLY..."
                     *     } */
                    "application/json": {
                        /** @description 3-char code (EUR) or longer ASCII; adapter handles hex conversion. */
                        currencyCode: string;
                        /** @description Trust line limit as a string to preserve precision. */
                        limit: string;
                        /** @description DEV ONLY: Family seed of the holder (used to sign the TrustSet). */
                        holderSecret: string;
                    };
                };
            };
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            ok?: boolean;
                            alreadyExisted?: boolean;
                            txHash?: string | null;
                            explorer?: string | null;
                        };
                    };
                };
                /** @description Default Response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            ok?: boolean;
                            error?: string;
                        };
                    };
                };
                /** @description Default Response */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            ok?: boolean;
                            error?: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/balances/{account}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get issued token balances for an account */
        get: {
            parameters: {
                query?: {
                    /** @description Optional issuer r-address filter */
                    issuer?: string;
                    /** @description Optional currency filter (3-char like USD/EUR or 160-bit hex) */
                    currency?: string;
                };
                header?: never;
                path: {
                    /** @description Account r-address */
                    account: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            ok?: boolean;
                            account?: string;
                            xrpBalance?: string;
                            trustLines?: {
                                currency?: string;
                                currencyHex?: string;
                                issuer?: string;
                                balance?: string;
                                limit?: string;
                                frozen?: boolean;
                                noRipple?: boolean;
                                qualityIn?: number;
                                qualityOut?: number;
                            }[];
                        };
                    };
                };
                /** @description Default Response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            ok?: boolean;
                            error?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: never;
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
