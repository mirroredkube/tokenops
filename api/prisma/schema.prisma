generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Asset {
  id                String             @id @default(cuid())
  assetRef          String             @unique
  ledger            AssetLedger
  network           AssetNetwork
  issuer            String
  code              String
  decimals          Int
  complianceMode    ComplianceMode     @default(RECORD_ONLY)
  controls          Json?
  registry          Json?
  metadata          Json?
  status            AssetStatus        @default(DRAFT)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  complianceRecords ComplianceRecord[]
  issuances         Issuance[]

  @@index([ledger, network])
  @@index([status])
  @@index([createdAt])
}

model Issuance {
  id                  String   @id @default(cuid())
  assetId             String
  to                  String
  amount              String
  complianceRef       Json?
  anchor              Boolean  @default(true)
  txId                String?
  explorer            String?
  status              String   @default("pending")
  validatedAt         DateTime?
  validatedLedgerIndex BigInt?
  failureCode         String?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  asset               Asset    @relation(fields: [assetId], references: [id], onDelete: Cascade)

  @@index([assetId])
  @@index([status])
  @@index([createdAt])
}

model ComplianceRecord {
  id                   String           @id @default(cuid())
  recordId             String           @unique
  assetId              String
  holder               String
  sha256               String
  status               ComplianceStatus @default(UNVERIFIED)
  verifiedAt           DateTime?
  verifiedBy           String?
  reason               String?
  isin                 String?
  legalIssuer          String?
  jurisdiction         String?
  micaClass            String?
  kycRequirement       String?
  transferRestrictions Boolean          @default(false)
  purpose              String?
  docs                 Json?
  consentTs            DateTime?
  createdAt            DateTime         @default(now())
  updatedAt            DateTime         @updatedAt
  asset                Asset            @relation(fields: [assetId], references: [id], onDelete: Cascade)

  @@index([assetId])
  @@index([status])
  @@index([holder])
  @@index([createdAt])
  @@index([recordId])
}

model User {
  id               String   @id @default(cuid())
  email            String   @unique
  name             String?
  sub              String   @unique
  role             String   @default("user")
  twoFactorSecret  String?
  twoFactorEnabled Boolean  @default(false)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@index([email])
  @@index([sub])
}

enum AssetLedger {
  XRPL
  HEDERA
  ETHEREUM
}

enum AssetNetwork {
  MAINNET
  TESTNET
  DEVNET
}

enum ComplianceMode {
  OFF
  RECORD_ONLY
  GATED_BEFORE
}

enum AssetStatus {
  DRAFT
  ACTIVE
  PAUSED
  RETIRED
}

enum ComplianceStatus {
  UNVERIFIED
  VERIFIED
  REJECTED
}
