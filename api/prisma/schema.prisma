generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Organization {
  id              String             @id @default(cuid())
  subdomain       String             @unique // Lookup alias for tenant isolation
  name            String             @unique @db.VarChar(100)
  legalName       String?            @db.VarChar(200)
  country         String             @db.Char(2)
  jurisdiction    String?            @db.VarChar(100)
  taxId           String?            @db.VarChar(50)
  website         String?            @db.VarChar(255)
  status          OrganizationStatus @default(ACTIVE)
  metadata        Json?
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  events          Event[]
  issuerAddresses IssuerAddress[]
  products        Product[]
  users           User[]

  @@index([country])
  @@index([status])
  @@index([createdAt])
  @@index([subdomain])
}

model User {
  id                               String                @id @default(cuid())
  email                            String                @unique
  name                             String?
  sub                              String                @unique
  twoFactorSecret                  String?
  twoFactorEnabled                 Boolean               @default(false)
  createdAt                        DateTime              @default(now())
  updatedAt                        DateTime              @updatedAt
  organizationId                   String
  status                           UserStatus            @default(ACTIVE)
  role                             UserRole              @default(VIEWER)
  events                           Event[]
  evidence                         Evidence[]
  platformAcknowledgedRequirements RequirementInstance[] @relation("PlatformAcknowledger")
  verifiedRequirements             RequirementInstance[]
  organization                     Organization          @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  settings                         UserSettings?

  @@index([email])
  @@index([sub])
  @@index([organizationId])
  @@index([role])
  @@index([status])
}

model UserSettings {
  id            String   @id @default(cuid())
  userId        String   @unique
  timezone      String   @default("UTC")
  language      String   @default("en")
  theme         String   @default("light")
  notifications Json     @default("{}")
  preferences   Json     @default("{}")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Product {
  id             String        @id @default(cuid())
  organizationId String
  name           String        @db.VarChar(100)
  description    String?       @db.VarChar(500)
  assetClass     AssetClass    @default(OTHER)
  policyPresets  Json?
  documents      Json?
  targetMarkets  String[]
  status         ProductStatus @default(DRAFT)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  assets         Asset[]
  events         Event[]
  organization   Organization  @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([organizationId, name])
  @@index([organizationId])
  @@index([assetClass])
  @@index([status])
  @@index([createdAt])
}

model Asset {
  id                   String                @id @default(cuid())
  assetRef             String                @unique
  ledger               AssetLedger
  network              AssetNetwork
  code                 String
  decimals             Int
  complianceMode       ComplianceMode        @default(RECORD_ONLY)
  controls             Json?
  registry             Json?
  metadata             Json?
  status               AssetStatus           @default(DRAFT)
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  productId            String
  issuingAddressId     String?
  assetClass           AssetClass            @default(OTHER)
  issuingAddress       IssuerAddress?        @relation(fields: [issuingAddressId], references: [id])
  product              Product               @relation(fields: [productId], references: [id], onDelete: Cascade)
  authorizations       Authorization[]
  authorizationRequests AuthorizationRequest[]
  events               Event[]
  issuances            Issuance[]
  requirementInstances RequirementInstance[]

  @@index([productId])
  @@index([ledger, network])
  @@index([status])
  @@index([createdAt])
}

model IssuerAddress {
  id             String              @id @default(cuid())
  organizationId String
  address        String
  ledger         AssetLedger
  network        AssetNetwork
  allowedUseTags String[]
  status         IssuerAddressStatus @default(PENDING)
  proofOfControl Json?
  approvedAt     DateTime?
  approvedBy     String?
  suspendedAt    DateTime?
  suspendedBy    String?
  reason         String?
  metadata       Json?
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
  assets         Asset[]
  events         Event[]
  organization   Organization        @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([organizationId])
  @@index([address])
  @@index([ledger, network])
  @@index([status])
  @@index([createdAt])
}

model Regime {
  id                   String                @id @default(cuid())
  name                 String
  version              String
  effectiveFrom        DateTime
  effectiveTo          DateTime?
  description          String?
  metadata             Json?
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  events               Event[]
  requirementTemplates RequirementTemplate[]

  @@index([name, version])
  @@index([effectiveFrom, effectiveTo])
}

model RequirementTemplate {
  id                   String                @id @default(cuid())
  regimeId             String
  name                 String
  description          String?
  applicabilityExpr    String
  dataPoints           String[]
  enforcementHints     Json?
  version              String                @default("1.0")
  effectiveFrom        DateTime
  effectiveTo          DateTime?
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  events               Event[]
  requirementInstances RequirementInstance[]
  regime               Regime                @relation(fields: [regimeId], references: [id], onDelete: Cascade)

  @@index([regimeId])
  @@index([name])
  @@index([effectiveFrom, effectiveTo])
}

model RequirementInstance {
  id                           String              @id @default(cuid())
  assetId                      String
  requirementTemplateId        String
  status                       RequirementStatus   @default(REQUIRED)
  evidenceRefs                 Json?
  verifierId                   String?
  verifiedAt                   DateTime?
  rationale                    String?
  exceptionReason              String?
  createdAt                    DateTime            @default(now())
  updatedAt                    DateTime            @updatedAt
  holder                       String?
  issuanceId                   String?
  transferAmount               String?
  transferType                 String?
  notes                        String?
  platformAcknowledged         Boolean             @default(false)
  platformAcknowledgedAt       DateTime?
  platformAcknowledgedBy       String?
  platformAcknowledgmentReason String?
  events                       Event[]
  evidence                     Evidence[]
  asset                        Asset               @relation(fields: [assetId], references: [id], onDelete: Cascade)
  issuance                     Issuance?           @relation(fields: [issuanceId], references: [id], onDelete: Cascade)
  platformAcknowledger         User?               @relation("PlatformAcknowledger", fields: [platformAcknowledgedBy], references: [id])
  requirementTemplate          RequirementTemplate @relation(fields: [requirementTemplateId], references: [id])
  verifier                     User?               @relation(fields: [verifierId], references: [id])

  @@index([assetId])
  @@index([requirementTemplateId])
  @@index([status])
  @@index([createdAt])
  @@index([issuanceId])
  @@index([holder])
  @@index([platformAcknowledged])
  @@index([platformAcknowledgedBy])
}

model Evidence {
  id                    String              @id @default(cuid())
  requirementInstanceId String
  fileName              String
  fileType              String
  fileSize              Int
  fileHash              String              @db.VarChar(64)
  uploadPath            String
  uploadedBy            String
  uploadedAt            DateTime            @default(now())
  description           String?
  tags                  String[]
  metadata              Json?
  requirementInstance   RequirementInstance @relation(fields: [requirementInstanceId], references: [id], onDelete: Cascade)
  user                  User                @relation(fields: [uploadedBy], references: [id])

  @@index([requirementInstanceId])
  @@index([uploadedBy])
  @@index([uploadedAt])
  @@index([fileHash])
}

model Event {
  id                    String               @id @default(cuid())
  organizationId        String?
  productId             String?
  assetId               String?
  issuerAddressId       String?
  regimeId              String?
  requirementTemplateId String?
  requirementInstanceId String?
  userId                String?
  eventType             String
  eventData             Json?
  rationale             String?
  createdAt             DateTime             @default(now())
  asset                 Asset?               @relation(fields: [assetId], references: [id], onDelete: Cascade)
  issuerAddress         IssuerAddress?       @relation(fields: [issuerAddressId], references: [id], onDelete: Cascade)
  organization          Organization?        @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  product               Product?             @relation(fields: [productId], references: [id], onDelete: Cascade)
  regime                Regime?              @relation(fields: [regimeId], references: [id], onDelete: Cascade)
  requirementInstance   RequirementInstance? @relation(fields: [requirementInstanceId], references: [id], onDelete: Cascade)
  requirementTemplate   RequirementTemplate? @relation(fields: [requirementTemplateId], references: [id], onDelete: Cascade)
  user                  User?                @relation(fields: [userId], references: [id])

  @@index([organizationId])
  @@index([productId])
  @@index([assetId])
  @@index([eventType])
  @@index([userId])
  @@index([createdAt])
}

model Issuance {
  id                   String                @id @default(cuid())
  assetId              String
  amount               String
  complianceRef        Json?
  anchor               Boolean               @default(false)
  txId                 String?
  explorer             String?
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  complianceEvaluated  Boolean               @default(false)
  complianceStatus     String?
  holder               String
  manifestHash         String?               @db.VarChar(66)
  manifestVersion      String                @default("1.0")
  status               IssuanceStatus        @default(PENDING)
  authorizations       Authorization[]
  asset                Asset                 @relation(fields: [assetId], references: [id])
  requirementInstances RequirementInstance[]

  @@index([manifestHash])
}

model Authorization {
  id             String                 @id @default(cuid())
  tenantId       String
  assetId        String
  ledger         String                 // XRPL-Testnet | XRPL-Mainnet
  currency       String                 // e.g., CHIMP
  holderAddress  String
  limit          String                 // store as string to avoid precision issues
  status         AuthorizationStatus
  initiatedBy    AuthorizationInitiator
  txHash         String?                @db.VarChar(64)
  createdAt      DateTime               @default(now())
  // Legacy fields for backward compatibility
  issuanceId     String?
  external       Boolean                @default(false)
  externalSource String?
  asset          Asset                  @relation(fields: [assetId], references: [id], onDelete: Cascade)
  issuance       Issuance?              @relation(fields: [issuanceId], references: [id], onDelete: Cascade)

  @@index([tenantId, assetId, holderAddress])
  @@index([tenantId, ledger, currency, holderAddress])
  @@index([status])
  @@index([createdAt])
  @@index([issuanceId])
}

model AuthorizationRequest {
  id                String                     @id @default(cuid())
  tenantId          String
  assetId           String
  holderAddress     String
  requestedLimit    String
  oneTimeTokenHash  String                     // hash, never store raw token
  authUrl           String
  status            AuthorizationRequestStatus @default(INVITED)
  expiresAt         DateTime
  consumedAt        DateTime?
  createdAt         DateTime                   @default(now())
  
  asset             Asset                      @relation(fields: [assetId], references: [id], onDelete: Cascade)

  @@index([tenantId, assetId, holderAddress])
}

model IdempotencyKey {
  id        String   @id @default(cuid())
  key       String   @unique
  result    Json
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@index([key])
  @@index([expiresAt])
}

enum OrganizationStatus {
  ACTIVE
  SUSPENDED
  INACTIVE
}

enum UserRole {
  ADMIN
  COMPLIANCE_OFFICER
  AUDITOR
  ISSUER_ADMIN
  COMPLIANCE_REVIEWER
  OPERATOR
  VIEWER
}

enum UserStatus {
  ACTIVE
  SUSPENDED
  INACTIVE
}

enum ProductStatus {
  DRAFT
  ACTIVE
  PAUSED
  RETIRED
}

enum AssetClass {
  ART
  EMT
  OTHER
}

enum IssuerAddressStatus {
  PENDING
  APPROVED
  SUSPENDED
  REVOKED
}

enum RequirementStatus {
  REQUIRED
  SATISFIED
  EXCEPTION
}

enum AssetLedger {
  XRPL
  HEDERA
  ETHEREUM
}

enum AssetNetwork {
  MAINNET
  TESTNET
  DEVNET
}

enum ComplianceMode {
  OFF
  RECORD_ONLY
  GATED_BEFORE
}

enum AssetStatus {
  DRAFT
  ACTIVE
  PAUSED
  RETIRED
}

enum AuthorizationStatus {
  HOLDER_REQUESTED
  ISSUER_AUTHORIZED
  EXTERNAL
  LIMIT_UPDATED
  TRUSTLINE_CLOSED
  FROZEN
  UNFROZEN
}

enum AuthorizationInitiator { 
  HOLDER 
  ISSUER 
  SYSTEM 
}

enum AuthorizationRequestStatus { 
  INVITED 
  CONSUMED 
  EXPIRED 
  CANCELLED 
}

enum IssuanceStatus {
  PENDING
  SUBMITTED
  VALIDATED
  FAILED
  EXPIRED
}
